// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  OWNER
}

model User {
  id            Int           @id @default(autoincrement())
  telegramId    String        @unique
  username      String
  role          UserRole      @default(USER)
  profilePic    String?
  gymEntries    GymEntry[]
  weightEntries WeightEntry[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

enum WorkoutType {
  GYM
  CARDIO
  YOGA
  SPORT
  OTHER
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
}

model Media {
  id         Int       @id @default(autoincrement())
  path       String
  type       MediaType
  gymEntry   GymEntry  @relation(fields: [gymEntryId], references: [id], onDelete: Cascade)
  gymEntryId Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model GymEntry {
  id        Int           @id @default(autoincrement())
  userId    Int
  date      DateTime
  points    Int
  types     WorkoutType[]
  notes     String?
  media     Media[]
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model WeightEntry {
  id        Int      @id @default(autoincrement())
  userId    Int
  date      DateTime
  weight    Float
  notes     String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
